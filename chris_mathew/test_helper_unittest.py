import unittest
from helper_functions import count_crossing, hurst, half_life


class TestSum(unittest.TestCase):

    def test_hurst1(self):
        # sine wave, ts = sin(t)
        # definately mean reverting
        self.assertLess(hurst([0.841470984807897,0.909297426825682,0.141120008059867,-0.756802495307928,-0.958924274663138,-0.279415498198926,0.656986598718789,0.989358246623382,0.412118485241757,-0.54402111088937,-0.999990206550703,-0.536572918000435,0.420167036826641,0.99060735569487,0.650287840157117,-0.287903316665065,-0.961397491879557,-0.750987246771676,0.149877209662952,0.912945250727628,0.836655638536056,-0.00885130929040388,-0.846220404175171,-0.905578362006624,-0.132351750097773,0.762558450479603,0.956375928404503,0.270905788307869,-0.663633884212968,-0.988031624092862,-0.404037645323065,0.551426681241691,0.999911860107267,0.529082686120024,-0.428182669496151,-0.991778853443116,-0.643538133356999,0.296368578709385,0.963795386284088,0.745113160479349,-0.158622668804709,-0.916521547915634,-0.831774742628598,0.0177019251054136,0.850903524534118,0.901788347648809,0.123573122745224,-0.768254661323667,-0.953752652759472,-0.262374853703929,0.670229175843375,0.986627592040485,0.395925150181834,-0.558789048851616,-0.99975517335862,-0.521551002086912,0.436164755247825,0.992872648084537,0.636738007139138,-0.304810621102217,-0.966117770008393,-0.739180696649223,0.167355700302807,0.920026038196791,0.826828679490103,-0.0265511540239668,-0.855519978975322,-0.897927680689291,-0.114784813783187,0.773890681557889,0.951054653254375,0.253823362762036,-0.676771956887308,-0.985146260468247,-0.38778163540943,0.56610763689818,0.999520158580731,0.513978455987535,-0.444112668707508,-0.993888653923375,-0.629887994274454,0.313228782433085,0.968364461100185,0.733190320073292,-0.176075619948587,-0.92345844700406,-0.821817836630823,0.0353983027336607,0.860069405812453,0.893996663600558,0.105987511751157,-0.779466069615805,-0.948282141269947,-0.245251985467654,0.683261714736121,0.983587745434345,0.379607739027522,-0.573381871990423,-0.999206834186354,-0.506365641109759,0.452025787178351,0.994826791358406,0.622988631442349,-0.321622403162531,-0.970535283537485,-0.727142500080853,0.184781744560667,0.926818505417785,0.816742606636317,-0.044242678085071,-0.864551448610608,-0.889995604366833,-0.097181905893209,0.78498038868131,0.94543533402477,0.236661393364286,-0.689697940935389,-0.981952169044084,-0.37140410143809,0.580611184212314,0.99881522472358,0.498713153896394,-0.459903490689591,-0.995686986889179,-0.616040459188656,0.329990825673782,0.972630067242408,0.721037710501732,-0.193473392038468,-0.930105950186762,-0.8116033871367,0.0530835871460582,0.868965756214236,0.885924816459948,0.0883686861040014,-0.790433206722889,-0.942514454558251,-0.228052259500861,0.696080131224742,0.980239659440312,0.363171365373259,-0.587795007167407,-0.998345360873918,-0.491021593898469,0.467745162045133,0.996469173121774,0.609044021883292,-0.338333394324277,-0.974648648094495,-0.714876429629165,0.202149881415654,0.933320523748862,0.806400580775486,-0.0619203372560573,-0.873311982774648,-0.881784618814781,-0.0795485428747221,0.795824096527455,0.939519731713148,0.219425258379005,-0.702407785577371,-0.97845035079338,-0.354910175844935,0.594932778023209,0.997797279449891,0.483291563728257,-0.475550186871899,-0.99717328877408,-0.601999867677605,0.34664945549703,0.976590867943566,0.708659140182323,-0.210810532913481,-0.936461974251213,-0.801134595178041,0.0707522360803452,0.877589787777116,0.877575335804269,0.0707221672389912,-0.80115263573383,-0.936451400117644,-0.210781065900192,0.708680408239208,0.976584383290629,0.346621180094276,-0.602023937555283,-0.997171023392149,-0.475523669012058,0.483317953667963,0.9977992786806,0.594908548461427,-0.354938357651846,-0.978456574622113,-0.702386329268492,0.219454667994064,0.939530055569931,0.795805842919647,-0.0795785916642835,-0.88179883606755,-0.873297297213995,-0.0618902507187207,0.80641840686583,0.93330970016696,0.202120359312791,-0.714897507767764,-0.97464190312541,-0.338305027540978,0.60906793019106,0.996466641766108,0.467718518342759,-0.491047853850463,-0.998347093796772,-0.587770619819841,0.363199451376361,0.980245621957223,0.696058488344911,-0.228081609413528,-0.942524527329403,-0.790414741493181,0.0883987124875315,0.885938797878757,0.868950838216349,0.0530534852699353,-0.811620997364974,-0.930094878004525,-0.193443817159008,0.721058597070632,0.972623062485624,0.329962369732397,-0.616064204053364,-0.995684189758103,-0.459876723232143,0.498739281803281,0.998816691202808,0.580586640989645,-0.371432089436923,-0.981957869782025,-0.689676113180267,0.236690681275077,0.945445154921117,0.784961713276403,-0.0972119075182243,-0.890009348856277,-0.864536299344272,-0.0442125632285597,0.816759999622809,0.926807185502688,0.184752119221718,-0.727163193443649,-0.970528019541805]),\
                         0.5, "Should be less than 0.5")

    def test_hurst2(self):
        # straight line, ts = exp(t/100)
        # exponential growth, definately persistient
        self.assertGreater(hurst([1.01005016708417,1.02020134002676,1.03045453395352,1.04081077419239,1.05127109637602,1.06183654654536,1.07250818125422,1.08328706767496,1.09417428370521,1.10517091807565,1.11627807045887,1.12749685157938,1.13882838332462,1.15027379885723,1.16183424272828,1.17351087099181,1.18530485132037,1.19721736312181,1.20924959765725,1.22140275816017,1.23367805995674,1.24607673058738,1.25860000992948,1.2712491503214,1.28402541668774,1.29693008666577,1.30996445073325,1.32312981233744,1.33642748802547,1.349858807576,1.36342511413218,1.37712776433596,1.39096812846378,1.40494759056359,1.41906754859326,1.43332941456034,1.44773461466332,1.46228458943422,1.47698079388264,1.49182469764127,1.50681778511285,1.52196155561863,1.53725752354828,1.55270721851134,1.56831218549017,1.58407398499448,1.59999419321736,1.61607440219289,1.63231621995538,1.64872127070013,1.66529119494589,1.68202764969889,1.69893230861855,1.71600686218486,1.7332530178674,1.7506725002961,1.76826705143374,1.78603843075007,1.80398841539786,1.82211880039051,1.84043139878164,1.85892804184634,1.87761057926434,1.89648087930495,1.9155408290139,1.93479233440203,1.95423732063594,1.97387773223045,1.99371553324308,2.01375270747048,2.03399125864675,2.05443321064389,2.07508060767412,2.09593551449436,2.11700001661267,2.13827622049682,2.15976625378492,2.1814722654982,2.20339642625594,2.22554092849247,2.24790798667647,2.27049983753241,2.29331874026418,2.31636697678109,2.33964685192599,2.36316069370579,2.38691085352428,2.41089970641721,2.43512965128987,2.45960311115695,2.48432253338482,2.5092903899363,2.53450917761785,2.55998141832927,2.58570965931585,2.61169647342312,2.63794445935415,2.66445624192942,2.69123447234926,2.71828182845904,2.74560101501692,2.7731947639643,2.80106583469908,2.82921701435156,2.85765111806316,2.88637098926796,2.915379499977,2.94467955106552,2.97427407256307,3.00416602394643,3.03435839443568,3.064854203293,3.09565650012471,3.12676836518616,3.15819290968977,3.18993327611618,3.2219926385285,3.25437420288967,3.28708120738312,3.32011692273655,3.35348465254902,3.38718773362133,3.42122953628967,3.45561346476268,3.49034295746184,3.52542148736538,3.56085256235552,3.59663972556928,3.63278655575281,3.66929666761924,3.7061737122102,3.74342137726086,3.78104338756878,3.81904350536634,3.85742553069697,3.89619330179521,3.93535069547047,3.97490162749475,4.0148500529942,4.05519996684467,4.09595540407118,4.13712044025139,4.17869919192325,4.22069581699655,4.26311451516882,4.30595952834521,4.34923514106274,4.39294568091876,4.43709551900366,4.48168907033806,4.52673079431425,4.57222519514216,4.61817682229978,4.66459027098813,4.71147018259074,4.75882124513785,4.80664819377518,4.85495581123743,4.90374892832662,4.95303242439511,5.00281122783359,5.05309031656387,5.10387471853673,5.15516951223468,5.20697982717985,5.2593108444469,5.31216779718117,5.36555597112197,5.41948070513121,5.4739473917272,5.528961477624,5.58452846427605,5.64065390842832,5.69734342267199,5.75460267600573,5.81243739440259,5.8708533613826,5.92985641859115,5.98945246638311,6.04964746441295,6.11044743223061,6.17185844988355,6.23388665852472,6.29653826102666,6.35981952260183,6.42373677142913,6.48829639928671,6.55350486219115,6.61936868104308,6.68589444227927,6.75308879853129,6.82095846929075,6.88951024158129,6.95875097063727,7.02868758058929,7.09932706515663,7.17067648834661,7.24274298516101,7.31553376230957,7.38905609893065,7.46331734731919,7.53832493366192,7.61408635877997,7.690609198879,7.76790110630677,7.84596981031845,7.92482311784949,8.00446891429635,8.08491516430506,8.16616991256765,8.24824128462666,8.33113748768769,8.41486681144013,8.49943762888612,8.58485839717789,8.67113765846346,8.75828404074083,8.84630625872088,8.93521311469875,9.02501349943412,9.11571639304031,9.20733086588225,9.29986607948359,9.39333128744278,9.48773583635853,9.58308916676438,9.67940081407284,9.7766804095289,9.87493768117318,9.97418245481472,10.0744246550136,10.1756743060733,10.2779415330434,10.3812365627318,10.4855697247276,10.5909514524338,10.6973922841111,10.8049028639313,10.913493943042,11.0231763806416,11.1339611450653,11.2458593148818,11.3588820800015,11.4730407427948,11.5883467192234,11.7048115399809,11.8224468516464,11.9412644178491,12.0612761204447,12.1824939607035]),\
                         0.5, "Should be greater than 0.5")


    def test_half_life1(self):
        # ts = exp(-lambda * t) * cos(t)
        #half life = ln(2)/lambda
        #https://en.wikipedia.org/wiki/Damped_sine_wave
        #lambda = 0.1
        # HL should approxmiately equal = 6.9
        # my half-life 1.35
        self.assertEqual(half_life([0.90483741803596,0.818730753077982,0.740818220681718,0.670320046035639,0.606530659712633,0.548811636094026,0.496585303791409,0.449328964117222,0.406569659740599,0.367879441171442,0.33287108369808,0.301194211912202,0.272531793034013,0.246596963941606,0.22313016014843,0.201896517994655,0.182683524052735,0.165298888221587,0.149568619222635,0.135335283236613,0.122456428252982,0.110803158362334,0.100258843722804,0.0907179532894125,0.0820849986238988,0.0742735782143339,0.0672055127397498,0.060810062625218,0.0550232200564072,0.0497870683678639,0.0450492023935578,0.0407622039783662,0.03688316740124,0.0333732699603261,0.0301973834223185,0.0273237224472926,0.0247235264703394,0.0223707718561656,0.0202419114458044,0.0183156388887342,0.0165726754017612,0.0149955768204777,0.0135685590122009,0.0122773399030684,0.0111089965382423,0.0100518357446336,0.00909527710169582,0.00822974704902002,0.00744658307092434,0.00673794699908547,0.00609674656551563,0.00551656442076077,0.00499159390691021,0.00451658094261267,0.00408677143846407,0.00369786371648293,0.00334596545747127,0.00302755474537581,0.00273944481876837,0.00247875217666636,0.0022428677194858,0.00202943063629573,0.00183630477702891,0.00166155727317393,0.00150343919297757,0.00136036803754789,0.00123091190267348,0.0011137751478448,0.00100778542904851,0.000911881965554516,0.000825104923265904,0.000746585808376679,0.000675538775193844,0.000611252761129572,0.000553084370147834,0.00050045143344061,0.000452827182886797,0.000409734978979786,0.000370743540459088,0.000335462627902512,0.000303539138078867,0.000274653569972142,0.000248516827107952,0.000224867324178848,0.000203468369010644,0.000184105793667579,0.000166585810987633,0.000150733075095477,0.000136388926482011,0.00012340980408668,0.000111665808490115,0.000101039401837093,9.14242314781733E-05,8.27240655566322E-05,7.48518298877006E-05,6.77287364908538E-05,0.000061283495053222,5.54515994321769E-05,5.01746820561753E-05,4.53999297624849E-05,4.10795552253006E-05,3.71703186841267E-05,0.000033633095185719,3.04324830084036E-05,2.75364493497472E-05,2.49160097315032E-05,2.25449379132122E-05,2.03995034111719E-05,1.84582339957806E-05,1.67017007902457E-05,0.000015112323819855,1.36741960656809E-05,1.23729242617882E-05,1.11954848425909E-05,1.01300935986307E-05,9.1660877362476E-06,8.29381916075736E-06,7.50455791507686E-06,6.79040480737947E-06,6.14421235332821E-06,5.55951324165014E-06,5.03045560711144E-06,4.55174446308323E-06,4.11858870753571E-06,3.72665317207867E-06,3.37201523413918E-06,3.05112555803642E-06,2.7607725720372E-06,2.49805032586663E-06,2.26032940698105E-06,2.04523062452349E-06,1.8506011975819E-06,1.67449320943427E-06,1.51514411214325E-06,1.37095908638408E-06,1.24049507995671E-06,1.12244636523434E-06,1.01563147100249E-06,9.18981357897957E-07,8.31528719103568E-07,7.5239829921642E-07,6.80798134397633E-07,6.16011626132053E-07,5.5739036926946E-07,5.04347662567888E-07,4.56352636790399E-07,4.12924941587326E-07,3.73629937988526E-07,3.38074348390474E-07,3.05902320501826E-07,2.7679186585408E-07,2.50451637232762E-07,2.26618012776571E-07,2.05052457561193E-07,1.85539136261598E-07,1.67882752999566E-07,1.51906596756896E-07,1.3745077279214E-07,1.24370602360287E-07,1.12535174719259E-07,1.018260369312E-07,9.21360083456613E-08,8.33681078996277E-08,7.54345834984423E-08,6.82560337633487E-08,6.17606133558036E-08,5.58833139251827E-08,5.05653134833552E-08,4.5753387694458E-08,4.13993771878517E-08,3.74597055629525E-08,3.38949432619692E-08,3.06694129456356E-08,2.77508324224075E-08,2.51099915574398E-08,2.27204599277386E-08,2.05583222976045E-08,1.86019392669155E-08,1.68317306967375E-08,1.52299797447126E-08,1.37806555489457E-08,1.2469252785751E-08,1.12826464954966E-08,1.02089607235976E-08,9.23744966197059E-09,8.35839010137461E-09,7.56298411826514E-09,6.84327102221799E-09,6.19204768266402E-09,5.60279643753727E-09,5.06961986232229E-09,4.58718174664751E-09,4.15065368769822E-09,3.75566676593829E-09,3.39826781949507E-09,3.07487987958661E-09,2.78226637101586E-09,2.51749871943828E-09,2.27792704120536E-09,2.06115362243856E-09,1.86500892190277E-09,1.68752985750853E-09,1.52694015912661E-09,1.38163259107954E-09,1.25015286638674E-09,1.13118509177163E-09,1.02353859775941E-09,9.26136022056775E-10,8.38002526947946E-10,7.58256042791191E-10,6.86098439969344E-10,6.2080754094036E-10,5.6172989244173E-10,5.08274225510592E-10,4.59905537865232E-10,4.16139739422415E-10,3.76538807361134E-10,3.40706402242989E-10,3.08283901313867E-10,2.78946809286892E-10,2.52401510684521E-10,2.28382331236157E-10,2.06648878920758E-10,1.86983638042684E-10,1.69189792261513E-10,1.53089254787948E-10,1.38520886031375E-10,1.25338880860683E-10,1.13411309337497E-10,1.02618796317019E-10,9.28533267014493E-11,8.40171643885887E-11,7.60218740960735E-11,6.87874362713459E-11,6.22414462290778E-11,5.63183895007427E-11,5.09589861437955E-11,4.61095974480822E-11,4.17216891016001E-11,3.7751345442791E-11,3.41588299378385E-11,3.09081874840832E-11,2.79668845592693E-11,2.53054836151189E-11,2.28973484564555E-11,2.07183776572089E-11,1.87467633452427E-11,1.69627729418407E-11,1.53485516714253E-11,1.3887943864964E-11]),\
                                   6.9, "Should be 6.9")

    def test_count_crossing1(self):
        # ts manually generated to cross 13 times
        self.assertEqual(count_crossing([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1]),\
                            13, "Should be 13")

    def test_count_crossing2(self):
        # ts manually generated to cross 12 times
        self.assertEqual(count_crossing([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1]),\
                            12, "Should be 12")

    def test_count_crossing3(self):
        # ts manually generated to cross 11 times
        self.assertEqual(count_crossing([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),\
                         11, "Should be 12")


if __name__ == '__main__':
    unittest.main()